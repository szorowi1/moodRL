import numpy as np

def optimal_choice(X, y):
    '''Check if optimal decision made per trial.
    
    Parameters
    ----------
    X : array, shape=(n_trials, n_machines)
      the design matrix, as generated by slot_machine_game().
    Y : array, shape=(n_trials,)
      choices made.
      
    Returns
    -------
    bool : array, shape=(n_trials,)
      boolean array: True if optimal choice made, otherwise False.
    '''
    
    ## Per row, identify rightward-most non-NaN column.
    ix = np.argmax(~np.isnan(X) * np.arange(X.shape[-1]), axis=-1)
    
    ## Return comparison.
    return y == ix

def cumulative_reward(X, y):
    '''Compute cumulative reward.
    
    Parameters
    ----------
    X : array, shape=(n_trials, n_machines)
      the design matrix, as generated by slot_machine_game().
    Y : array, shape=(n_trials,)
      choices made.
      
    Returns
    -------
    R : array, shape=(n_trials,)
      Cumulative reward over trials.
    '''
    
    return np.cumsum([X[i,j] for i,j in enumerate(y)])